<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        dJypkQCrkQAAAABJRU5ErkJggg==
</value>
  </data>
</root>